# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CNa_yFPqUd4bNqp0mM-XVSCo46WQ8b86

IMPORT LIBRARY
"""

import pandas as pd

import numpy as np

"""Import CSV as DataFrame"""

df=pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Hill%20Valley%20Dataset.csv')

"""Give the First Five Rows As Dataframe"""

df.head()

"""get infromatio from dataframe"""

df.info()

"""get the summary statistics"""

df.describe()

"""get the column names"""

df.columns
print (df.columns.tolist())

"""get the shape of the dataframe"""

df.shape

"""get the unique values in y variable"""

df['Class'].value_counts()

df.groupby('Class').mean()

"""define X and Y"""

y=df['Class']

y.shape

y

X=df.drop('Class',axis=1)

X.shape

X

"""get the plots for first two rows"""

import matplotlib.pyplot as plt

plt.plot(X.iloc[0,:])
plt.title('valley');

plt.plot(X.iloc[1,:])
plt.title('hill');

"""get the X variables standardised"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

X=ss.fit_transform(X)

X

X.shape

"""get train test split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, stratify=y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""get model train"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train,y_train)

lr=LogisticRegression()

lr.fit(X_train,y_train)

"""get model prediction"""

y_pred=lr.predict(X_test)

y_pred.shape

y_pred

"""get probability of each predicted class"""

lr.predict_proba(X_test)

"""get model evaluation"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""get future predictions"""

X_new=df.sample(1)

X_new

X_new.shape

X_new=X_new.drop('Class',axis=1)

X_new

X_new.shape

X_new = ss.fit_transform(X_new)

y_pred_new = model.predict(X_new)

y_pred_new

model.predict_proba(X_new)